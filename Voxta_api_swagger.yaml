openapi: 3.0.0
info:
  title: Voxta API
  version: '1.0'
  description: |
    Complete API specification for Voxta service with detailed examples and explanations.
    
    ## Core Concepts
    
    Voxta's API is built around several key concepts that work together to create interactive AI experiences:
    
    - Characters: AI personalities that can interact with users. Each character has a defined personality, voice settings, 
      and can participate in conversations through different scenarios.
    
    - Scenarios: Templates that define how conversations should flow. They can specify roles, chat styles (like Roleplay or Companion),
      and other behavioral settings.
    
    - Memory Books: Long-term memory storage that helps characters maintain context and remember important information
      across conversations.
    
    - Chats: Individual conversation sessions between users and characters. These can follow different formats based on
      the selected scenario.
    
    - Services: System components that enable various features like text-to-speech, speech-to-text, computer vision, etc.
      These can be configured per user or globally. Services can be enabled or disabled through the service-types endpoints.

    ## Service Types
    
    The following service types can be configured:
    - TextToSpeech: Converts text responses to spoken audio
    - SpeechToText: Converts user voice input to text
    - Memory: Manages long-term memory for characters
    - TextGen: Controls text generation settings
    - ActionInference: Handles action recognition and processing
    - ComputerVision: Processes visual inputs
    - Summarization: Creates summaries of conversations

    ## Authentication
    
    Authentication details should be included in the HTTP headers. Specific authentication requirements are deployment-dependent.
    
    ## Rate Limiting
    
    The API may implement rate limiting depending on the deployment configuration. Clients should handle 429 Too Many Requests
    responses appropriately.

servers:
  - url: https://localhost:5843
    description: Local development server

paths:

  /api/augmentations/:
    get:
      summary: List available augmentations
      description: |
        Retrieves a list of available augmentations that can be applied to character interactions.
        Augmentations are additional features or modifications that can enhance character behavior,
        such as web search capabilities, vision processing, or specific behavioral patterns.
      responses:
        '200':
          description: List of available augmentations
          content:
            application/json:
              schema:
                type: object
                properties:
                  augmentations:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                          description: Unique identifier for the augmentation
              example:
                augmentations:
                  - key: "bing"
                  - key: "bing.news"
                  - key: "bing.search"
                  - key: "character_text_replacements"
                  - key: "continuations_auto_continue"
                  - key: "vision"
                  - key: "vision.continuous"
                  - key: "vision.prompted"
                  - key: "think_pass_before_reply"

  /api/characters/:
    get:
      summary: List all characters
      description: |
        Retrieves a list of available characters with optional chat information. Characters are the core
        interactive elements in Voxta, each with their own personality, voice settings, and interaction styles.
      parameters:
        - name: includeChatsInfo
          in: query
          description: Include additional information about character's chat history
          schema:
            type: boolean
        - name: assistant
          in: query
          description: Filter to only show assistant characters
          schema:
            type: boolean
      responses:
        '200':
          description: List of characters
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'

  /api/characters/tags:
    get:
      summary: List character tags
      description: |
        Returns a list of tags that can be used to categorize and filter characters.
        Tags help organize characters by traits, roles, or other characteristics.
      responses:
        '200':
          description: List of available character tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: ["android", "built-in", "cat girl", "construct", "cute", "empathetic"]

  /api/characters/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Character UUID
        schema:
          type: string
          format: uuid
    get:
      summary: Get character details
      responses:
        '200':
          description: Detailed character information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
              example:
                memoryBooks: ["fe7f0ac9-3f72-4744-88dd-0ca907886c08"]
                favorite: false
                scenarioOnly: false
                culture: "en-US"
                profile: "{{char}} is a brilliant computer program. He likes helping {{user}} but also teasing them."
                chatStyle: "Companion"
                explicitContent: false
                name: "George"
                description: "male + adult"
                personality: "sassy + helpful + complains + teases"
    put:
      summary: Update character details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
      responses:
        '200':
          description: Updated character details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'

  /api/characters/{id}/assets:
    get:
      summary: Get character assets
      description: |
        Retrieves a list of assets associated with a character. Assets can include:
        - Avatar images in different emotional states
        - Voice samples
        - Custom scripts or behaviors
        - Other character-specific resources
      parameters:
        - name: id
          in: path
          required: true
          description: Character UUID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Character assets information
          content:
            application/json:
              schema:
                type: object
                properties:
                  localPath:
                    type: string
                  files:
                    type: array
                    items:
                      type: string
              example:
                localPath: "/mnt/data/Characters/6227dc38-f656-413f-bba8-773380bad9d9/Assets"
                files: []

  /api/chats:
    get:
      summary: List chats
      parameters:
        - name: characterId
          in: query
          description: Filter chats by character
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: List of chats
          content:
            application/json:
              schema:
                type: object
                properties:
                  chats:
                    type: array
                    items:
                      $ref: '#/components/schemas/Chat'
    post:
      summary: Create new chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                characters:
                  type: array
                  items:
                    type: string
                    format: uuid
                scenario:
                  type: string
                  format: uuid
                client:
                  type: string
                ephemeral:
                  type: boolean
            example:
              characters: ["6227dc38-f656-413f-bba8-773380bad9d9"]
              scenario: "53958f45-47be-40d1-d2eb-dd5b476769fa"
              client: "Voxta.Talk"
              ephemeral: false
      responses:
        '201':
          description: Created chat

  /api/cultures:
    get:
      summary: List available cultures
      description: |
        Returns a list of supported cultures/locales. These cultures affect:
        - Character language preferences
        - Date and time formatting
        - Voice selection options
        - Other localization settings
      responses:
        '200':
          description: List of supported cultures
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: ["en-US", "en-GB", "es-ES", "fr-FR"]

  /api/memory-books/:
    get:
      summary: List memory books
      responses:
        '200':
          description: List of memory books
          content:
            application/json:
              schema:
                type: object
                properties:
                  memoryBooks:
                    type: array
                    items:
                      $ref: '#/components/schemas/MemoryBook'
    post:
      summary: Create memory book
      parameters:
        - name: characterId
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '201':
          description: Created memory book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryBook'

  /api/modules/{id}:
    get:
      summary: Get module details
      description: |
        Retrieves information about a specific module. Modules are configurable components
        that add functionality to the system.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Module details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Module'
              example:
                id: "0aeb13ee-e078-81c4-b6ba-d8d8d54b3f2a"
                serviceName: "BuiltInChainOfThought"
                serviceLabel: "Voxta Utilities: Chain Of Thought"
                required: false
                installable: false
                fields:
                  - name: "EnableFor"
                    label: "Enable For Character Types"
                    type: "choices"
                values:
                  Frequency: "3"
                  MaxTokens: "300"
    put:
      summary: Update module configuration
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                label:
                  type: string
                configuration:
                  type: object
      responses:
        '200':
          description: Updated module configuration

  /api/packages/:
    get:
      summary: List available packages
      description: |
        Returns a list of available content packages. Packages are collections of related content
        that can include characters, scenarios, memory books, and other resources.
      responses:
        '200':
          description: List of available packages
          content:
            application/json:
              schema:
                type: object
                properties:
                  packages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Package'

  /api/packages/{id}/overview:
    get:
      summary: Get package overview
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Package overview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Package'

  /api/voices/services/{id}:
    get:
      summary: Get voice service details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: culture
          in: query
          schema:
            type: string
        - name: characterId
          in: query
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Voice service details
          content:
            application/json:
              schema:
                type: object
                properties:
                  serviceName:
                    type: string
                  serviceLabel:
                    type: string
                  voices:
                    type: array
                    items:
                      type: object
                  fields:
                    type: array
                    items:
                      type: object

  /api/service-types/TextToSpeech:
    put:
      summary: Configure Text-to-Speech service
      description: |
        Enables or disables the text-to-speech service and configures its settings.
        This service converts character responses to spoken audio output.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                  description: Whether the service should be active
                defaultServiceId:
                  type: string
                  format: uuid
                  description: ID of the default TTS provider to use
            example:
              enabled: true
              defaultServiceId: "713e3be8-bc4b-d90a-dda0-2f4ec97878c9"
      responses:
        '200':
          description: Service configuration updated

  /api/service-types/SpeechToText:
    put:
      summary: Configure Speech-to-Text service
      description: |
        Enables or disables the speech-to-text service and configures its settings.
        This service converts user voice input to text for processing.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                  description: Whether the service should be active
            example:
              enabled: true
      responses:
        '200':
          description: Service configuration updated

  /api/service-types/Memory:
    put:
      summary: Configure Memory service
      description: |
        Enables or disables the memory service and configures its settings.
        This service manages long-term memory for characters, allowing them to remember
        past interactions and important information.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                defaultServiceId:
                  type: string
                  format: uuid
            example:
              enabled: true
              defaultServiceId: "e085b23f-11a1-15b0-0ffa-38bd5ff4bd86"
      responses:
        '200':
          description: Service configuration updated

  /api/service-types/TextGen:
    put:
      summary: Configure Text Generation service
      description: |
        Enables or disables the text generation service and configures its settings.
        This service controls how character responses are generated, including parameters
        like response length, creativity, and style.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
                defaultServiceId:
                  type: string
                  format: uuid
            example:
              enabled: true
              defaultServiceId: "77063842-fe6b-6e70-276f-53f2c402f490"
      responses:
        '200':
          description: Service configuration updated

  /api/service-types/ActionInference:
    put:
      summary: Configure Action Inference service
      description: |
        Enables or disables the action inference service and configures its settings.
        This service helps characters understand and respond to user actions and behaviors.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
            example:
              enabled: false
      responses:
        '200':
          description: Service configuration updated

  /api/service-types/ComputerVision:
    put:
      summary: Configure Computer Vision service
      description: |
        Enables or disables the computer vision service and configures its settings.
        This service allows characters to process and respond to visual inputs like
        images and video streams.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
            example:
              enabled: false
      responses:
        '200':
          description: Service configuration updated

  /api/service-types/Summarization:
    put:
      summary: Configure Summarization service
      description: |
        Enables or disables the summarization service and configures its settings.
        This service creates concise summaries of conversations and interactions.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enabled:
                  type: boolean
            example:
              enabled: false
      responses:
        '200':
          description: Service configuration updated


components:
  schemas:
    Character:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        personality:
          type: string
        profile:
          type: string
        chatStyle:
          type: string
          enum: [Companion, Roleplay, Assistant, Undefined]
        culture:
          type: string
        explicitContent:
          type: boolean
        favorite:
          type: boolean
        memoryBooks:
          type: array
          items:
            type: string
            format: uuid

    Chat:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdTimestamp:
          type: string
          format: date-time
        favorite:
          type: boolean
        characters:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              name:
                type: string

    MemoryBook:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        version:
          type: string
        dateCreated:
          type: string
          format: date-time
        dateModified:
          type: string
          format: date-time

    Package:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        version:
          type: string
        description:
          type: string
        creator:
          type: string
        appControlled:
          type: boolean
        explicitContent:
          type: boolean
        dateCreated:
          type: string
          format: date-time
        dateModified:
          type: string
          format: date-time
        entryResource:
          type: object
          properties:
            kind:
              type: string
              enum: [Character, Scenario]
            id:
              type: string
              format: uuid

    Module:
      type: object
      properties:
        id:
          type: string
          format: uuid
        serviceName:
          type: string
        serviceLabel:
          type: string
        required:
          type: boolean
        installable:
          type: boolean
        helpLink:
          type: string
        fields:
          type: array
          items:
            type: object
        values:
          type: object

    ServiceConfiguration:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether the service is active
        defaultServiceId:
          type: string
          format: uuid
          description: ID of the default provider for this service
        preferClientCapability:
          type: boolean
          description: Whether to prefer client-side capabilities when available
